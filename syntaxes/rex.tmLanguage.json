{
	"scopeName": "source.rex",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operator-logical"
		},
		{
			"include": "#reservedKeywords"
		},
		{
			"include": "#conditionalKeywords"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#strings-single"
		},
		{
			"include": "#strings-double"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.rex",
					"match": "(?:\\s*\\/\\/).*?(?=$|\n)"
				},
				{
					"name": "comment.block.rex",
					"begin": "\\/\\*",
					"end": "\\*\\/",
					"captures": {
						"0": {
							"name": "comment.block.rex"
						}
					}
				}
			]
		},		
		"operator-logical": {
			"name": "keyword.operator.logical.rex",
			"match": "\\b(?:and|or)\\b"
		},
		"reservedKeywords": {
			"name": "keyword.reserved.rex",
			"match": "\\b(?:let|const|ret|fn|in|not|is|not|isnt)\\b"
		},
		"conditionalKeywords": {
			"name": "keyword.control.rex",
			"match": "\\b(?:if|elf|els|for|foreach|while|do)\\b"
		},
		"functions": {
			"name": "entity.name.function.rex",
			"match": "\\b(?:print)\\b"
		},
		"strings-single": {
			"name": "string.quoted.single.rex",
			"begin": "'",
			"end": "'"
		},
		"strings-double": {
			"name": "string.quoted.double.rex",
			"begin": "\"",
			"end": "\""
		},
		"variables": {
			"name": "variable.constant.rex",
			"match": "\\b(?:[a-zA-Z0-9_$]+)\\b"
		},
		"numbers": {
			"name": "constant.numeric.rex",
			"match": "\\b(?:-?\\d+(?:\\.\\d+)?)\\b"
		},
		"symbols": {
			"name": "punctuation.definition.symbol.rex",
			"match": "\\b(?:\\+|-|\\*|/|\\^|\\(|\\)|\\{|\\}|\\[|\\]|<|>|=|,|;|:|\\.)\\b"
		}
	}
}